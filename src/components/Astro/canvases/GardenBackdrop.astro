
---
import MainBackgroundFull from "../../assets/mainBackgroundFull.jpeg";
---
<canvas id="garden-canvas" class="w-dvw h-dvh "/>
<script>
import {Plant} from "../canvases/classes/Plant.ts"
import {ImageLayer} from "../canvases/classes/ImageLayer.ts"
import MainBackgroundFull from "../../../assets/mainBackgroundFull.jpeg";

import foreground from "../../../assets/mainlayers/foreground v1.png";
import tree from "../../../assets/mainlayers/midground checkpoint v2.png"
import castle from "../../../assets/mainlayers/castlle v1.png";
import background from "../../../assets/mainlayers/foregrounderase.png";


    const canvas = document.getElementById("garden-canvas") as HTMLCanvasElement
    if (canvas) {
       
        const ctx = canvas?.getContext('2d') as CanvasRenderingContext2D;
        let targetFPS = 60;
        let sideLength = 4;
        let height = 0;
        let width = 0
        let mousePosition = {xPos: 0, yPos: 0}

        let foregroundPlants: Plant[] = [];
        let midgroundPlants: Plant[] = [];
        let imageLayers: ImageLayer[] = [];
        

        if (!ctx) {
            console.log("no context")
        }

        
        async function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            width = Math.ceil(canvas.width / sideLength)
            height = Math.ceil(canvas.height / sideLength)

            if (window.innerWidth < 650) {
                
                midgroundPlants = []
                foregroundPlants = []
                targetFPS = 30;
            } else {

                midgroundPlants = [
                    new Plant({sideLength, x: 0 - (8 * sideLength), y: canvas.height, delay: 400, opacity: 0.3, parallaxStrength: 0}),
                    new Plant({sideLength, x: 0 - (8 * sideLength), y: canvas.height - sideLength * 98, delay: 400, opacity: 0.3, parallaxStrength: 0}),
                    new Plant({sideLength, x: 0 - (8 * sideLength), y: canvas.height - sideLength * 98 * 2, delay: 400, opacity: 0.3, parallaxStrength: 0}),

                    new Plant({sideLength, x: canvas.width - (35 * sideLength), y: canvas.height, delay: 400, opacity: 0.3, parallaxStrength: 0}),
                    new Plant({sideLength, x: canvas.width - (35 * sideLength), y: canvas.height - sideLength * 98, delay: 400, opacity: 0.3, parallaxStrength: 0}),
                    new Plant({sideLength, x: canvas.width - (35 * sideLength), y: canvas.height - sideLength * 98 * 2, delay: 400, opacity: 0.3, parallaxStrength: 0}),
                ]
                foregroundPlants = [
                    new Plant({sideLength, x: - (16 * sideLength), y: canvas.height, parallaxStrength: 0}),
                    new Plant({sideLength, x: 0 - (16 * sideLength), y: canvas.height - sideLength * 98, delay: 0, parallaxStrength: 0}),
                    new Plant({sideLength, x: 0 - (16 * sideLength), y: canvas.height - sideLength * 98 * 2, delay: 0, parallaxStrength: 0}),

                    new Plant({sideLength, x: canvas.width - (27 * sideLength), y: canvas.height, parallaxStrength: 0}),
                    new Plant({sideLength, x: canvas.width - (27 * sideLength), y: canvas.height - sideLength * 98, parallaxStrength: 0}),
                    new Plant({sideLength, x: canvas.width - (27 * sideLength), y: canvas.height - sideLength * 98 * 2, parallaxStrength: 0}),
                ]
            }

            imageLayers = [
                new ImageLayer({
                    imgMeta: background,
                    parallaxStrength: 0.003,
                    scale: 1,
                    swaySpeed: 0.001,
                    amplitude: 1,
                }),
                new ImageLayer({
                    imgMeta: castle,
                    parallaxStrength: 0.015,
                    scale: 1.2,
                    swaySpeed: 0.001,
                    amplitude: 3,
                }),
                new ImageLayer({
                    imgMeta: tree,
                    parallaxStrength: 0.01,
                    scale: 1.2,
                    swaySpeed: 0.002,
                    amplitude: 2,
                }),
                new ImageLayer({
                    imgMeta: foreground,
                    parallaxStrength: 0.001,
                    scale: 1
                }),
            ]

            await Promise.all(imageLayers.map(layer => layer.setupImage(canvas)));
        }

        
        window.addEventListener('resize', resizeCanvas);
        window.addEventListener('mousemove', (event) => {
            mousePosition = {xPos: event.x, yPos: event.y}
        })

        // Device orientation for mobile parallax
        window.addEventListener('deviceorientation', (event) => {
            // gamma: left/right tilt, beta: up/down tilt
            // Map to screen coordinates
            const centerX = window.innerWidth / 2;
            const centerY = window.innerHeight / 2;
            // Sensitivity factor for parallax
            const sensitivity = 20;
            mousePosition.xPos = centerX + (event.gamma || 0) * sensitivity;
            mousePosition.yPos = centerY + (event.beta || 0) * sensitivity;
        });

        let lastFrameTime = 0;
        const frameDelay = 1000 / targetFPS;

        let fps = 0;
        let framesThisSecond = 0;
        let lastFpsUpdate = 0;

        function animate(time = 0) {

            const delta = time - lastFrameTime;

            if (!lastFpsUpdate) lastFpsUpdate = time;
            const elapsed = time - lastFpsUpdate;

            framesThisSecond++;
            if (elapsed >= 1000) {
                fps = framesThisSecond;
                framesThisSecond = 0;
                lastFpsUpdate = time;
            }

            ctx.clearRect(0, 0, canvas.width, canvas.height)
            ctx.fillStyle = "black";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            

            imageLayers.forEach(layer => {
                layer.update(time, mousePosition);
                layer.draw(ctx, canvas);
            });

            midgroundPlants.forEach(plant =>plant.update(time, mousePosition));
            midgroundPlants.forEach(plant => plant.draw(ctx, canvas));
            foregroundPlants.forEach(plant =>plant.update(time, mousePosition));
            foregroundPlants.forEach(plant => plant.draw(ctx, canvas));

            // Draw FPS debug at bottom right
            ctx.save();
            ctx.font = "20px monospace";
            ctx.fillStyle = "#00FF00";
            ctx.textAlign = "right";
            ctx.textBaseline = "bottom";
            ctx.fillText(`FPS: ${fps}`, canvas.width - 10, canvas.height - 10);
            ctx.restore();

            requestAnimationFrame(animate)
        }

        resizeCanvas().then(() => animate())
    }

</script>

