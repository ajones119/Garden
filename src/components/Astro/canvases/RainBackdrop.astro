

<canvas id="garden-canvas" class="w-full h-full"/>
<script type="module">const canvas = document.getElementById("garden-canvas");

const ctx = canvas.getContext("2d");

if (!ctx) {
  console.log("no context");
}

let numberOfDrops = 50;
const targetFPS = 45;
let mainFill =
  getComputedStyle(canvas.parentElement)
    .getPropertyValue("--color-foreground")
    .trim() || "white";

let splashes = [];
let drops = [];
const surfacePositions = [];

function updateElementPositions() {
  surfacePositions.length = 0;
  const canvasRect = canvas.getBoundingClientRect();
  const container = canvas.parentElement.parentElement;

  container?.querySelectorAll(".surface").forEach((button) => {
    const rect = button.getBoundingClientRect();
    surfacePositions.push({
      top: rect.top - canvasRect.top,
      left: rect.left - canvasRect.left,
      right: rect.right - canvasRect.left,
      bottom: rect.bottom - canvasRect.top,
      width: rect.width,
      height: rect.height,
    });
  });
}

updateElementPositions(); // initial call

function nodeCollideWithElement(x, y) {
  return surfacePositions.some((pos) => {
    return x < pos.right && x > pos.left && y < pos.bottom && y > pos.top;
  });
}

class RainDrop {
  x = 0;
  y = 0;
  angle = Math.PI / 2 + Math.PI / 12;
  velocity = 400;
  radius = 2;
  trail = [];
  prevX = 0;
  prevY = 0;
  hit = false;

  constructor(x, y, angle = Math.PI / 2 + Math.PI / 12) {
    this.x = x;
    this.y = y;
    this.angle = angle;
  }

  update(deltaTime) {
    const speed = (this.velocity * deltaTime) / 1000; // Adjust speed based on delta time

    this.trail.push({ x: this.x, y: this.y });
    if (this.trail.length > 1) {
      this.trail.shift();
    }

    this.prevX = this.x;
    this.prevY = this.y;

    this.y += Math.sin(this.angle) * speed;
    this.x += Math.cos(this.angle) * speed;

    if (nodeCollideWithElement(this.x, this.y)) {
      splashes.push(new SplashDrop(this.x, this.y, Math.PI / 3));
      splashes.push(new SplashDrop(this.x, this.y, Math.PI / 2));
      splashes.push(new SplashDrop(this.x, this.y, Math.PI / 1.25));
      this.reset();
    } else if (this.y > canvas.height) {
      this.reset();
    } else {
      this.hit = false;
    }
  }

  reset() {
    this.y = -10;
    this.x = Math.random() * canvas.width;
    this.trail = [];
    this.hit = true;
  }

  /**
   *
   * @param ctx CanvasRendering2dContext
   */
  draw(ctx) {
    ctx.fillStyle = mainFill;
    ctx.shadowColor = mainFill;
    ctx.shadowBlur = 10;

    if (this.trail.length > 0) {
      ctx.strokeStyle = mainFill;
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(this.trail[0]?.x, this.trail[0]?.y);
      ctx.lineTo(this.x, this.y);
      ctx.stroke();
    }

    ctx.beginPath();
    ctx.fillStyle = mainFill;
    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
    ctx.fill();
  }
}

class SplashDrop {
  x = 0;
  y = 0;
  vx = 0; // horizontal velocity
  vy = 0; // vertical velocity
  gravity = 0.4; // gravity acceleration
  radius = 0.5;
  canRemove = false;

  constructor(x, y, angle = Math.PI / 4, speed = 0.25) {
    this.x = x;
    this.y = y;
    // Initial velocity: up and to the right
    this.vx = Math.cos(angle) * speed;
    this.vy = Math.sin(angle) * -speed; // negative for upward
  }

  update(deltaTime) {
    this.vy += (this.gravity * deltaTime) / 1000;
    this.x += this.vx * deltaTime;
    this.y += this.vy * deltaTime;

    if (this.y > canvas.height) {
      this.canRemove = true;
    }
  }

  draw(ctx) {
    ctx.beginPath();
    ctx.fillStyle = mainFill;
    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
    ctx.fill();
  }
}

function resizeCanvas() {
  const container = canvas.parentElement;
  if (container) {
    const rect = container.getBoundingClientRect();
    canvas.width = rect.width;
    canvas.height = rect.height;
    updateElementPositions();
    drops = [];
    splashes = [];

    if (canvas.width < 500) {
      numberOfDrops = 20;
    } else if (canvas.width < 800) {
      numberOfDrops = 30;
    } else if (canvas.width < 1200) {
      numberOfDrops = 40;
    } else {
      numberOfDrops = 50;
    }

    for (let i = 0; i < numberOfDrops; i++) {
      const randomXPlacement = Math.random() * canvas.width * 1.5;
      const randomYPlacement = Math.random() * -screen.height + -5;
      drops.push(
        new RainDrop(
          randomXPlacement,
          randomYPlacement,
          Math.PI / 2 + Math.PI / 12,
        ),
      );
    }
  }
}
resizeCanvas();
window.addEventListener("resize", resizeCanvas);
window.addEventListener("scroll", updateElementPositions);
canvas.parentElement.childNodes.forEach((element) =>
  element.addEventListener("scroll", updateElementPositions),
);

let lastFrameTime = 0;
const frameDelay = 1000 / targetFPS;

function animate(time = 0) {
  const delta = time - lastFrameTime;

  if (delta >= frameDelay) {
    mainFill =
      getComputedStyle(canvas.parentElement)
        .getPropertyValue("--color-foreground")
        .trim() || "white";
    lastFrameTime = time;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drops.forEach((drop) => {
      drop.update(delta);
      drop.draw(ctx);
    });

    splashes.forEach((splash) => {
      splash.update(delta);
      splash.draw(ctx);
    });
    splashes = splashes.filter((splash) => !splash.canRemove);

    /*surfacePositions.forEach(pos => {
        ctx.fillStyle = "blue";
        ctx.fillRect(pos.left, pos.top, pos.width, pos.height);
      });*/
  }

  requestAnimationFrame(animate);
}

animate();
</script>