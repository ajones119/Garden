---
import Layout from "../../layouts/Layout.astro";

import { Image } from 'astro:assets'
import BaseDemoLayout from "../../layouts/demo/BaseDemoLayout.astro";
import type { BaseDemoLayoutProps } from "./types";
import RainfallCanvasBackdrop from "../../components/canvases/RainBackdrop.astro"
import DemoSubsection from "../../layouts/demo/DemoSubsection.astro";
import CodeBlock from "../../components/CodeBlock.astro";

const base: BaseDemoLayoutProps = {
		dateAdded: "07/15/2025",
		title: "Rainfall Canvas",
		topics: ["2d Canvas", "Weather Effects", "Canvas Animation"],
		sections: [
			{ id: "intro", title: "Introduction" },
            { id: "approach", title: "Approach the problem" },
			{ id: "base-classes", title: "Base Class" },
			{ id: "animation-loop", title: "Animation Loop" },
            { id: "detect-elements", title: "Detect HTML Elements" },
            { id: "splash", title: "Splash" },
            { id: "final-code", title: "Final code" },
		]
	};

---
<Layout hasNavbar>
  <BaseDemoLayout {...base}>
   <div class="relative min-h-[100dvh] overflow-hidden">
  <!-- Backdrop: fills container -->
  <div class="absolute inset-0 z-0">
    <RainfallCanvasBackdrop />
  </div>

  <!-- Content: centers vertically and horizontally -->
  <div class="relative z-10 flex flex-col items-center justify-center min-h-[100dvh] gap-6 px-4">
    <div class="p-4 min-w-fit border border-border rounded-md surface text-foreground w-full max-w-md hover:bg-muted transition-all">
      <p>Here's a simple canvas animation of rain falling</p>
    </div>
    <div class="p-4 min-w-fit border border-border rounded-md surface text-foreground w-full max-w-md hover:bg-muted transition-all">
      <p>with the added flair of splashing on html elements rendered within its parent!</p>
    </div>
  </div>
</div>

    <DemoSubsection id="approach" title="Approach the problem">
        <p>The goal of this is to have a continuously animated rainfall that can interact with elements on the screen, and doesn't slow down processes with the animation.</p>
        <br />
        <p>
            To achieve this, I created a canvas that fills the entire parent container, and then I use a simple animation loop to draw the rain and splashes.
            We need to consider how we should run a loop animation, how to track rain drops, and how to quickly paint all of this to a canvas without causing performance issues.
        </p>
        <p>We'll start by setting up our canvas and script. We'll need to ensure we have a canvas, then we'll set it to its container size and add a listener to adjust for changing screen sizes.</p>
<CodeBlock>
{`
<canvas id="garden-canvas" class="w-full h-full"/>
<script type="module">const canvas = document.getElementById("garden-canvas");

const ctx = canvas.getContext("2d");

if (!ctx) {
  console.log("no context");
}
function resizeCanvas() {
  const container = canvas.parentElement;
  if (container) {
    const rect = container.getBoundingClientRect();
    canvas.width = rect.width;
    canvas.height = rect.height;
  }
}
resizeCanvas();
window.addEventListener("resize", resizeCanvas);
window.addEventListener("scroll", updateElementPositions);
</script>
`}
</CodeBlock>
    </DemoSubsection>
    <DemoSubsection id="base-classes" title="Base Class">
        <p>
            Lets start by considering our state! We'll need to keep track of each rain drop as it passes down the canvas. We can start with an empty class with a few 
            states that we can use to track the rain drop's position, velocity, and size.</p>
        </p>
        <br />
        <CodeBlock>{`
class RainDrop {
  x = 0;
  y = 0;
  angle = Math.PI / 2 + Math.PI / 12;
  velocity = 400;
  radius = 2;

  constructor(x, y, angle = Math.PI / 2 + Math.PI / 12) {
    this.x = x;
    this.y = y;
    this.angle = angle;
  }

  update(deltaTime) {}
  draw(ctx) {}
}`}
</CodeBlock>
<br />
<p>Notice that this class also has an update and draw function. We'll also add these to our splashes and run then within our animation loop itself. </p>
<p>Now we can add the drops to the canvas by tracking a main "state". Here, I decided to allow my canvas to keep numberOfDrops = 50 and a targetFPS = 45. Now we can work on our update and draw functions that will run on each frame.</p>
<br />
<p>For the update function, we'll use a simple sin + cos to calculate position. This will work well for moving the circular drop, but adding a small streak behind it gives a little more flair to the entire thing. So we'll also add a new trail state to track the last few position for our draw function later.</p>
<CodeBlock>
{`
 update(deltaTime) {
    const speed = (this.velocity * deltaTime) / 1000; // Adjust speed based on delta time

    // add current position to trail
    this.trail.push({ x: this.x, y: this.y });
    if (this.trail.length > 1) {
      this.trail.shift();
    }

    // save previous position
    this.prevX = this.x;
    this.prevY = this.y;

    // set new position
    this.y += Math.sin(this.angle) * speed;
    this.x += Math.cos(this.angle) * speed;
  }
`}
</CodeBlock>
<br />
<p> Now we can add a draw function. This will draw an arc at the current position, and draw a line behind it</p>
<CodeBlock>
{`
draw(ctx) {
    ctx.fillStyle = mainFill;
    // shadows are a fun but expensive flair
    ctx.shadowColor = mainFill;
    ctx.shadowBlur = 10;

    if (this.trail.length > 0) {
      ctx.strokeStyle = mainFill;
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(this.trail[0]?.x, this.trail[0]?.y);
      ctx.lineTo(this.x, this.y);
      ctx.stroke();
    }

    ctx.beginPath();
    ctx.fillStyle = mainFill;
    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
    ctx.fill();
  }
`}
</CodeBlock>
<br />
<p>Before we can start animating though, we need a way to reset rain drop that go off screen so they don't fall forever. To do this, lets update our `Update` function to catch when a drop has gone too far off screen and reset it to the top again.</p>
<CodeBlock>
{`
update(deltaTime) {
//...updateFunc

    if (this.y > canvas.height) {
    this.reset();
    }
}

 reset() {
    this.y = -10;
    this.x = Math.random() * canvas.width;
    this.trail = [];
  }
`}
</CodeBlock>
    </DemoSubsection>
    <DemoSubsection id="animation-loop" title="Animation Loop">
        <p>Next we'll add our actual animation loop function. This will leverage `requestAnimationFrame` to recursively call itself. In order to keep the backdrop efficient, we'll use the targetFPS to limit the rate we actually commit to render and draw on the canvas.</p>
        <CodeBlock>
{`
// set the canvas state
let numberOfDrops = 50;
const targetFPS = 45;

let lastFrameTime = 0;
const frameDelay = 1000 / targetFPS;

function animate(time = 0) {
  const delta = time - lastFrameTime;

  //this allows us to limit the rate we actually draw to the canvas
  if (delta >= frameDelay) {
    lastFrameTime = time;
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    //update and draw canvas elements
  }

  // request the next frame
  requestAnimationFrame(animate);
}

// initial function call
animate()
`}
        </CodeBlock>
    </DemoSubsection>
    <DemoSubsection id="final-code" title="Final Code">
        <p class="codepen" data-height="600" data-default-tab="html,result" data-slug-hash="EaVKNGR" data-pen-title="Rain Canvas" data-user="Aramis-Jones" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/Aramis-Jones/pen/EaVKNGR">
  Rain Canvas</a> by Aramis Jones (<a href="https://codepen.io/Aramis-Jones">@Aramis-Jones</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://public.codepenassets.com/embed/index.js"></script>
    </DemoSubsection>
  </BaseDemoLayout>
</Layout>

<script>
	

</script>
